
digitalProjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000514  000005a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000514  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  000005a8  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000005a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000183  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000107f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000078  00000000  00000000  000010ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a2e  00000000  00000000  00001126  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001f9  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000349  00000000  00000000  00001d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000011c  00000000  00000000  00002098  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001b5  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000019d  00000000  00000000  00002369  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  00002506  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 31       	cpi	r26, 0x18	; 24
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 14 02 	call	0x428	; 0x428 <main>
  88:	0c 94 88 02 	jmp	0x510	; 0x510 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <putch_lcd>:
*
*Anropar:_delay_ms()
************************************************************************/
void putch_lcd(unsigned char data)
{
	PORTB = (1<<PC5)|(1<<PC4)|((data & 0xF0) >> 4);//E=1,RS=1 samt skickar de 4 höga-bitarna av tecknet till PORTC 0-3
  90:	98 2f       	mov	r25, r24
  92:	92 95       	swap	r25
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	90 63       	ori	r25, 0x30	; 48
  98:	95 b9       	out	0x05, r25	; 5
	PORTB &= ~(1<<PC5); // E=0 nödvändig för att dislpayen ska läsa in datan
  9a:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	00 00       	nop
	_delay_us(1);
	PORTB = (1<<PC5)|(1<<PC4)|(data & 0x0F); //E=1,RS=1 samt skickar de 4 låga-bitarna av tecknet till PORTC 0-3
  9e:	8f 70       	andi	r24, 0x0F	; 15
  a0:	80 63       	ori	r24, 0x30	; 48
  a2:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PC5); // E=0
  a4:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	81 ee       	ldi	r24, 0xE1	; 225
  a8:	94 e0       	ldi	r25, 0x04	; 4
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <putch_lcd+0x1a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <putch_lcd+0x20>
  b0:	00 00       	nop
  b2:	08 95       	ret

000000b4 <putcmd_lcd>:
*
*Anropar:_delay_us(1)
************************************************************************/
void putcmd_lcd(unsigned char data)
{
	PORTB = (1<<PC5)|((data & 0xF0) >> 4);//E=1 samt skickar de 4 höga-bitarna av komandot till PORTC 0-3
  b4:	98 2f       	mov	r25, r24
  b6:	92 95       	swap	r25
  b8:	9f 70       	andi	r25, 0x0F	; 15
  ba:	90 62       	ori	r25, 0x20	; 32
  bc:	95 b9       	out	0x05, r25	; 5
	PORTB &= ~(1<<PC5); // E=0 nödvändig för att displayen ska läsa in datan
  be:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	00 00       	nop
	_delay_us(1);
	// LCD Lower 4 bits data (DB3,DB2,DB1,DB0)
	PORTB = (1<<PC5)|(data & 0x0F); //E=1 samt skickar de 4 låga-bitarna av komandot till PORTC 0-3
  c2:	8f 70       	andi	r24, 0x0F	; 15
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PC5);
  c8:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	81 ee       	ldi	r24, 0xE1	; 225
  cc:	94 e0       	ldi	r25, 0x04	; 4
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <putcmd_lcd+0x1a>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <putcmd_lcd+0x20>
  d4:	00 00       	nop
  d6:	08 95       	ret

000000d8 <init_lcd>:
  d8:	8b e4       	ldi	r24, 0x4B	; 75
  da:	9d e1       	ldi	r25, 0x1D	; 29
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <init_lcd+0x4>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <init_lcd+0xa>
  e2:	00 00       	nop
*Anropar:putcmd_lcd()
************************************************************************/
void init_lcd()
{
	_delay_ms(30); // väntar så att displayen hinner vakna
	putcmd_lcd(0x28); // sätter displayen i 4 bit mode och till två rader
  e4:	88 e2       	ldi	r24, 0x28	; 40
  e6:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
	putcmd_lcd(0x0C); // display på, cursor av, blink av
  ea:	8c e0       	ldi	r24, 0x0C	; 12
  ec:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
	putcmd_lcd(0x01); // rensar displayen och sätter cursorn till position 0( längst till vänster på rad 1)
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
	putcmd_lcd(0x06); // Entry Mode Set: Increment, No shift
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
  fc:	08 95       	ret

000000fe <__vector_1>:
}
/*************************************************************************/
//interrupt

ISR(INT0_vect){		
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	4f 93       	push	r20
 10e:	5f 93       	push	r21
 110:	6f 93       	push	r22
 112:	7f 93       	push	r23
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	
	DDRD = 1<<PIND7;		
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	8a b9       	out	0x0a, r24	; 10
	PORTD = 1<<PIND7;	
 124:	8b b9       	out	0x0b, r24	; 11
	putcmd_lcd(0x01);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
 12c:	2f e7       	ldi	r18, 0x7F	; 127
 12e:	84 e8       	ldi	r24, 0x84	; 132
 130:	9e e1       	ldi	r25, 0x1E	; 30
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <__vector_1+0x34>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <__vector_1+0x3e>
 13c:	00 00       	nop
	_delay_ms(10000);
	PORTD=0b00000000;
 13e:	1b b8       	out	0x0b, r1	; 11
	}
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	bf 91       	pop	r27
 146:	af 91       	pop	r26
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	7f 91       	pop	r23
 14e:	6f 91       	pop	r22
 150:	5f 91       	pop	r21
 152:	4f 91       	pop	r20
 154:	3f 91       	pop	r19
 156:	2f 91       	pop	r18
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <taemotX>:
int counter = 0;
int cou =0;
uint16_t X, Y, Z; //unsigned 16-bit integer

void taemotX(){
	itoa(X, s,10);
 162:	4a e0       	ldi	r20, 0x0A	; 10
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	6e e0       	ldi	r22, 0x0E	; 14
 168:	71 e0       	ldi	r23, 0x01	; 1
 16a:	80 91 16 01 	lds	r24, 0x0116
 16e:	90 91 17 01 	lds	r25, 0x0117
 172:	0e 94 43 02 	call	0x486	; 0x486 <itoa>
	s[counter] = X;
 176:	80 91 02 01 	lds	r24, 0x0102
 17a:	90 91 03 01 	lds	r25, 0x0103
 17e:	fc 01       	movw	r30, r24
 180:	e2 5f       	subi	r30, 0xF2	; 242
 182:	fe 4f       	sbci	r31, 0xFE	; 254
 184:	20 91 16 01 	lds	r18, 0x0116
 188:	20 83       	st	Z, r18
	counter++;
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	90 93 03 01 	sts	0x0103, r25
 190:	80 93 02 01 	sts	0x0102, r24
	putcmd_lcd(0x81);
 194:	81 e8       	ldi	r24, 0x81	; 129
 196:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
	putch_lcd(s[0]);
 19a:	80 91 0e 01 	lds	r24, 0x010E
 19e:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
 1a2:	2f e3       	ldi	r18, 0x3F	; 63
 1a4:	8d e0       	ldi	r24, 0x0D	; 13
 1a6:	93 e0       	ldi	r25, 0x03	; 3
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <taemotX+0x46>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <taemotX+0x50>
 1b2:	00 00       	nop
	_delay_ms(1000);
	putch_lcd(s[1]);
 1b4:	80 91 0f 01 	lds	r24, 0x010F
 1b8:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
 1bc:	2f e3       	ldi	r18, 0x3F	; 63
 1be:	8d e0       	ldi	r24, 0x0D	; 13
 1c0:	93 e0       	ldi	r25, 0x03	; 3
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <taemotX+0x60>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <taemotX+0x6a>
 1cc:	00 00       	nop
	_delay_ms(1000);
	putch_lcd(s[2]);
 1ce:	80 91 10 01 	lds	r24, 0x0110
 1d2:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
 1d6:	2f e3       	ldi	r18, 0x3F	; 63
 1d8:	8d e0       	ldi	r24, 0x0D	; 13
 1da:	93 e0       	ldi	r25, 0x03	; 3
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <taemotX+0x7a>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <taemotX+0x84>
 1e6:	00 00       	nop
 1e8:	08 95       	ret

000001ea <taemotY>:
	_delay_ms(1000);
	
	
}
void taemotY(){
	itoa(Y, m, 10);
 1ea:	4a e0       	ldi	r20, 0x0A	; 10
 1ec:	50 e0       	ldi	r21, 0x00	; 0
 1ee:	62 e1       	ldi	r22, 0x12	; 18
 1f0:	71 e0       	ldi	r23, 0x01	; 1
 1f2:	80 91 0a 01 	lds	r24, 0x010A
 1f6:	90 91 0b 01 	lds	r25, 0x010B
 1fa:	0e 94 43 02 	call	0x486	; 0x486 <itoa>
	m[count]  =  Y;
 1fe:	80 91 04 01 	lds	r24, 0x0104
 202:	90 91 05 01 	lds	r25, 0x0105
 206:	fc 01       	movw	r30, r24
 208:	ee 5e       	subi	r30, 0xEE	; 238
 20a:	fe 4f       	sbci	r31, 0xFE	; 254
 20c:	20 91 0a 01 	lds	r18, 0x010A
 210:	20 83       	st	Z, r18
	count++;
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	90 93 05 01 	sts	0x0105, r25
 218:	80 93 04 01 	sts	0x0104, r24
	putcmd_lcd(0x86);
 21c:	86 e8       	ldi	r24, 0x86	; 134
 21e:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
	putch_lcd(m[0]);
 222:	80 91 12 01 	lds	r24, 0x0112
 226:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
 22a:	2f e3       	ldi	r18, 0x3F	; 63
 22c:	8d e0       	ldi	r24, 0x0D	; 13
 22e:	93 e0       	ldi	r25, 0x03	; 3
 230:	21 50       	subi	r18, 0x01	; 1
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <taemotY+0x46>
 238:	00 c0       	rjmp	.+0      	; 0x23a <taemotY+0x50>
 23a:	00 00       	nop
	_delay_ms(1000);
	putcmd_lcd(0x87);
 23c:	87 e8       	ldi	r24, 0x87	; 135
 23e:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
	putch_lcd(m[1]);
 242:	80 91 13 01 	lds	r24, 0x0113
 246:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
 24a:	2f e3       	ldi	r18, 0x3F	; 63
 24c:	8d e0       	ldi	r24, 0x0D	; 13
 24e:	93 e0       	ldi	r25, 0x03	; 3
 250:	21 50       	subi	r18, 0x01	; 1
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <taemotY+0x66>
 258:	00 c0       	rjmp	.+0      	; 0x25a <taemotY+0x70>
 25a:	00 00       	nop
	_delay_ms(1000);
	putcmd_lcd(0x88);
 25c:	88 e8       	ldi	r24, 0x88	; 136
 25e:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
	putch_lcd(m[2]);
 262:	80 91 14 01 	lds	r24, 0x0114
 266:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
 26a:	2f e3       	ldi	r18, 0x3F	; 63
 26c:	8d e0       	ldi	r24, 0x0D	; 13
 26e:	93 e0       	ldi	r25, 0x03	; 3
 270:	21 50       	subi	r18, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <taemotY+0x86>
 278:	00 c0       	rjmp	.+0      	; 0x27a <taemotY+0x90>
 27a:	00 00       	nop
 27c:	08 95       	ret

0000027e <taemotZ>:
	_delay_ms(1000);
}

void taemotZ(){
	itoa(Z, n, 10);
 27e:	4a e0       	ldi	r20, 0x0A	; 10
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	66 e0       	ldi	r22, 0x06	; 6
 284:	71 e0       	ldi	r23, 0x01	; 1
 286:	80 91 0c 01 	lds	r24, 0x010C
 28a:	90 91 0d 01 	lds	r25, 0x010D
 28e:	0e 94 43 02 	call	0x486	; 0x486 <itoa>
	n[cou]  =  Z;
 292:	80 91 00 01 	lds	r24, 0x0100
 296:	90 91 01 01 	lds	r25, 0x0101
 29a:	fc 01       	movw	r30, r24
 29c:	ea 5f       	subi	r30, 0xFA	; 250
 29e:	fe 4f       	sbci	r31, 0xFE	; 254
 2a0:	20 91 0c 01 	lds	r18, 0x010C
 2a4:	20 83       	st	Z, r18
	cou++;
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	90 93 01 01 	sts	0x0101, r25
 2ac:	80 93 00 01 	sts	0x0100, r24
	putcmd_lcd(0x8B);
 2b0:	8b e8       	ldi	r24, 0x8B	; 139
 2b2:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
	putch_lcd(n[0]);
 2b6:	80 91 06 01 	lds	r24, 0x0106
 2ba:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
 2be:	2f e3       	ldi	r18, 0x3F	; 63
 2c0:	8d e0       	ldi	r24, 0x0D	; 13
 2c2:	93 e0       	ldi	r25, 0x03	; 3
 2c4:	21 50       	subi	r18, 0x01	; 1
 2c6:	80 40       	sbci	r24, 0x00	; 0
 2c8:	90 40       	sbci	r25, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <taemotZ+0x46>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <taemotZ+0x50>
 2ce:	00 00       	nop
	_delay_ms(1000);
	
	if(n[1]>0){
 2d0:	80 91 07 01 	lds	r24, 0x0107
 2d4:	88 23       	and	r24, r24
 2d6:	89 f0       	breq	.+34     	; 0x2fa <taemotZ+0x7c>
		putcmd_lcd(0x8C);
 2d8:	8c e8       	ldi	r24, 0x8C	; 140
 2da:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
		putch_lcd(n[1]);
 2de:	80 91 07 01 	lds	r24, 0x0107
 2e2:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
 2e6:	2f e3       	ldi	r18, 0x3F	; 63
 2e8:	8d e0       	ldi	r24, 0x0D	; 13
 2ea:	93 e0       	ldi	r25, 0x03	; 3
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	80 40       	sbci	r24, 0x00	; 0
 2f0:	90 40       	sbci	r25, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <taemotZ+0x6e>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <taemotZ+0x78>
 2f6:	00 00       	nop
 2f8:	0f c0       	rjmp	.+30     	; 0x318 <taemotZ+0x9a>
		_delay_ms(1000);}else{
		putcmd_lcd(0x8C);
 2fa:	8c e8       	ldi	r24, 0x8C	; 140
 2fc:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
		putch_lcd(0x11);
 300:	81 e1       	ldi	r24, 0x11	; 17
 302:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
		putch_lcd(0x11);
 306:	81 e1       	ldi	r24, 0x11	; 17
 308:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
		putch_lcd(0x11);
 30c:	81 e1       	ldi	r24, 0x11	; 17
 30e:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
		putch_lcd(0x11);
 312:	81 e1       	ldi	r24, 0x11	; 17
 314:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
		
	}
	if(n[2]>0){
 318:	80 91 08 01 	lds	r24, 0x0108
 31c:	88 23       	and	r24, r24
 31e:	89 f0       	breq	.+34     	; 0x342 <taemotZ+0xc4>
		putcmd_lcd(0x8D);
 320:	8d e8       	ldi	r24, 0x8D	; 141
 322:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
		putch_lcd(n[2]);
 326:	80 91 08 01 	lds	r24, 0x0108
 32a:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
 32e:	2f e3       	ldi	r18, 0x3F	; 63
 330:	8d e0       	ldi	r24, 0x0D	; 13
 332:	93 e0       	ldi	r25, 0x03	; 3
 334:	21 50       	subi	r18, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <taemotZ+0xb6>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <taemotZ+0xc0>
 33e:	00 00       	nop
 340:	09 c0       	rjmp	.+18     	; 0x354 <taemotZ+0xd6>
		_delay_ms(1000);	}else{
		putcmd_lcd(0x8D);
 342:	8d e8       	ldi	r24, 0x8D	; 141
 344:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
		putch_lcd(0x11);
 348:	81 e1       	ldi	r24, 0x11	; 17
 34a:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
		putch_lcd(0x11);
 34e:	81 e1       	ldi	r24, 0x11	; 17
 350:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
		
	}
	if(n[3]>0){
 354:	80 91 09 01 	lds	r24, 0x0109
 358:	88 23       	and	r24, r24
 35a:	41 f0       	breq	.+16     	; 0x36c <taemotZ+0xee>
		putcmd_lcd(0x8E);
 35c:	8e e8       	ldi	r24, 0x8E	; 142
 35e:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
	putch_lcd(n[3]);}
 362:	80 91 09 01 	lds	r24, 0x0109
 366:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
 36a:	08 95       	ret
	else{
		putcmd_lcd(0x8E);
 36c:	8e e8       	ldi	r24, 0x8E	; 142
 36e:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
		putch_lcd(0x11);
 372:	81 e1       	ldi	r24, 0x11	; 17
 374:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
 378:	08 95       	ret

0000037a <ADC_omvandlingX>:
	}
	
}

void ADC_omvandlingX(){
	ADMUX = (ADMUX & 0xf0 | 0x00);
 37a:	ec e7       	ldi	r30, 0x7C	; 124
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	80 7f       	andi	r24, 0xF0	; 240
 382:	80 83       	st	Z, r24
	ADCSRA |= 0x40;//start ADC
 384:	ea e7       	ldi	r30, 0x7A	; 122
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	80 64       	ori	r24, 0x40	; 64
 38c:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC)){}
 38e:	80 81       	ld	r24, Z
 390:	86 fd       	sbrc	r24, 6
 392:	fd cf       	rjmp	.-6      	; 0x38e <ADC_omvandlingX+0x14>
	X=ADC;
 394:	80 91 78 00 	lds	r24, 0x0078
 398:	90 91 79 00 	lds	r25, 0x0079
 39c:	90 93 17 01 	sts	0x0117, r25
 3a0:	80 93 16 01 	sts	0x0116, r24
 3a4:	08 95       	ret

000003a6 <ADC_omvandlingY>:
}

void ADC_omvandlingY(){
	ADMUX = (ADMUX & 0xf0 | 0x01);
 3a6:	ec e7       	ldi	r30, 0x7C	; 124
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	80 7f       	andi	r24, 0xF0	; 240
 3ae:	81 60       	ori	r24, 0x01	; 1
 3b0:	80 83       	st	Z, r24
	ADCSRA |= 0x40;
 3b2:	ea e7       	ldi	r30, 0x7A	; 122
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	80 64       	ori	r24, 0x40	; 64
 3ba:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC)){}
 3bc:	80 81       	ld	r24, Z
 3be:	86 fd       	sbrc	r24, 6
 3c0:	fd cf       	rjmp	.-6      	; 0x3bc <ADC_omvandlingY+0x16>
	Y=ADC;
 3c2:	80 91 78 00 	lds	r24, 0x0078
 3c6:	90 91 79 00 	lds	r25, 0x0079
 3ca:	90 93 0b 01 	sts	0x010B, r25
 3ce:	80 93 0a 01 	sts	0x010A, r24
 3d2:	08 95       	ret

000003d4 <ADC_omvandlingZ>:
}

void ADC_omvandlingZ(){
	ADMUX = (ADMUX & 0xf0 | 0x02);
 3d4:	ec e7       	ldi	r30, 0x7C	; 124
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	80 7f       	andi	r24, 0xF0	; 240
 3dc:	82 60       	ori	r24, 0x02	; 2
 3de:	80 83       	st	Z, r24
	ADCSRA |= 0x40;
 3e0:	ea e7       	ldi	r30, 0x7A	; 122
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	80 64       	ori	r24, 0x40	; 64
 3e8:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC)){}//start conversion bit 6
 3ea:	80 81       	ld	r24, Z
 3ec:	86 fd       	sbrc	r24, 6
 3ee:	fd cf       	rjmp	.-6      	; 0x3ea <ADC_omvandlingZ+0x16>
	Z=ADC;
 3f0:	80 91 78 00 	lds	r24, 0x0078
 3f4:	90 91 79 00 	lds	r25, 0x0079
 3f8:	90 93 0d 01 	sts	0x010D, r25
 3fc:	80 93 0c 01 	sts	0x010C, r24
 400:	08 95       	ret

00000402 <initADC>:
}


void initADC(){
	ADMUX = 0b01000000;
 402:	80 e4       	ldi	r24, 0x40	; 64
 404:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = 0;
 408:	ea e7       	ldi	r30, 0x7A	; 122
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADEN);
 40e:	80 81       	ld	r24, Z
 410:	80 68       	ori	r24, 0x80	; 128
 412:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS0);
 414:	80 81       	ld	r24, Z
 416:	81 60       	ori	r24, 0x01	; 1
 418:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1);
 41a:	80 81       	ld	r24, Z
 41c:	82 60       	ori	r24, 0x02	; 2
 41e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2);
 420:	80 81       	ld	r24, Z
 422:	84 60       	ori	r24, 0x04	; 4
 424:	80 83       	st	Z, r24
 426:	08 95       	ret

00000428 <main>:
	
}

int main(void)
{
	DDRB = 0xFF; // PORTB sätts till utgång
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xFF; //nollställer PORTB	
 42c:	85 b9       	out	0x05, r24	; 5
	init_lcd(); //initierar displayen
 42e:	0e 94 6c 00 	call	0xd8	; 0xd8 <init_lcd>
	initADC();	
 432:	0e 94 01 02 	call	0x402	; 0x402 <initADC>
	//---------------------------------------------------------------interruptSetup();
	EIMSK = 1<<INT0;					// Enable INT0
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	8d bb       	out	0x1d, r24	; 29
	EICRA = 1<<ISC01 | 0<<ISC00;	// Trigger INT0 on following edge
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	80 93 69 00 	sts	0x0069, r24
	
    DDRD = 1<<PD2;		// Set PD2 as input (Using for interupt INT0)
 440:	84 e0       	ldi	r24, 0x04	; 4
 442:	8a b9       	out	0x0a, r24	; 10
    PORTD = 1<<PD2;		// Enable PD2 pull-up resistor	
 444:	8b b9       	out	0x0b, r24	; 11
	sei();		//Enable Global Interrupt
 446:	78 94       	sei
	while(1){
	
		ADC_omvandlingX();	
 448:	0e 94 bd 01 	call	0x37a	; 0x37a <ADC_omvandlingX>
		ADC_omvandlingY();	
 44c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_omvandlingY>
		ADC_omvandlingZ();
 450:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_omvandlingZ>
		
		
	putcmd_lcd(0x80); //ställer kursern på rad ett plats ett
 454:	80 e8       	ldi	r24, 0x80	; 128
 456:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
	putch_lcd(0x58);//Skriver ut text received från rx på displayen
 45a:	88 e5       	ldi	r24, 0x58	; 88
 45c:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
	putcmd_lcd(0x85); //ställer kursern på rad ett plats ett
 460:	85 e8       	ldi	r24, 0x85	; 133
 462:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
	putch_lcd(0x59);//Skriver ut text received från rx på displayen
 466:	89 e5       	ldi	r24, 0x59	; 89
 468:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
	putcmd_lcd(0x8A); //ställer kursern på rad ett plats ett
 46c:	8a e8       	ldi	r24, 0x8A	; 138
 46e:	0e 94 5a 00 	call	0xb4	; 0xb4 <putcmd_lcd>
	putch_lcd(0x5A);//Skriver ut text received från rx på displayen 
 472:	8a e5       	ldi	r24, 0x5A	; 90
 474:	0e 94 48 00 	call	0x90	; 0x90 <putch_lcd>
	taemotX();
 478:	0e 94 b1 00 	call	0x162	; 0x162 <taemotX>
	taemotY();	
 47c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <taemotY>
	taemotZ();	
 480:	0e 94 3f 01 	call	0x27e	; 0x27e <taemotZ>
 484:	e1 cf       	rjmp	.-62     	; 0x448 <main+0x20>

00000486 <itoa>:
 486:	fb 01       	movw	r30, r22
 488:	9f 01       	movw	r18, r30
 48a:	e8 94       	clt
 48c:	42 30       	cpi	r20, 0x02	; 2
 48e:	c4 f0       	brlt	.+48     	; 0x4c0 <itoa+0x3a>
 490:	45 32       	cpi	r20, 0x25	; 37
 492:	b4 f4       	brge	.+44     	; 0x4c0 <itoa+0x3a>
 494:	4a 30       	cpi	r20, 0x0A	; 10
 496:	29 f4       	brne	.+10     	; 0x4a2 <itoa+0x1c>
 498:	97 fb       	bst	r25, 7
 49a:	1e f4       	brtc	.+6      	; 0x4a2 <itoa+0x1c>
 49c:	90 95       	com	r25
 49e:	81 95       	neg	r24
 4a0:	9f 4f       	sbci	r25, 0xFF	; 255
 4a2:	64 2f       	mov	r22, r20
 4a4:	77 27       	eor	r23, r23
 4a6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__udivmodhi4>
 4aa:	80 5d       	subi	r24, 0xD0	; 208
 4ac:	8a 33       	cpi	r24, 0x3A	; 58
 4ae:	0c f0       	brlt	.+2      	; 0x4b2 <itoa+0x2c>
 4b0:	89 5d       	subi	r24, 0xD9	; 217
 4b2:	81 93       	st	Z+, r24
 4b4:	cb 01       	movw	r24, r22
 4b6:	00 97       	sbiw	r24, 0x00	; 0
 4b8:	a1 f7       	brne	.-24     	; 0x4a2 <itoa+0x1c>
 4ba:	16 f4       	brtc	.+4      	; 0x4c0 <itoa+0x3a>
 4bc:	5d e2       	ldi	r21, 0x2D	; 45
 4be:	51 93       	st	Z+, r21
 4c0:	10 82       	st	Z, r1
 4c2:	c9 01       	movw	r24, r18
 4c4:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <strrev>

000004c8 <strrev>:
 4c8:	dc 01       	movw	r26, r24
 4ca:	fc 01       	movw	r30, r24
 4cc:	67 2f       	mov	r22, r23
 4ce:	71 91       	ld	r23, Z+
 4d0:	77 23       	and	r23, r23
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <strrev+0x4>
 4d4:	32 97       	sbiw	r30, 0x02	; 2
 4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <strrev+0x18>
 4d8:	7c 91       	ld	r23, X
 4da:	6d 93       	st	X+, r22
 4dc:	70 83       	st	Z, r23
 4de:	62 91       	ld	r22, -Z
 4e0:	ae 17       	cp	r26, r30
 4e2:	bf 07       	cpc	r27, r31
 4e4:	c8 f3       	brcs	.-14     	; 0x4d8 <strrev+0x10>
 4e6:	08 95       	ret

000004e8 <__udivmodhi4>:
 4e8:	aa 1b       	sub	r26, r26
 4ea:	bb 1b       	sub	r27, r27
 4ec:	51 e1       	ldi	r21, 0x11	; 17
 4ee:	07 c0       	rjmp	.+14     	; 0x4fe <__udivmodhi4_ep>

000004f0 <__udivmodhi4_loop>:
 4f0:	aa 1f       	adc	r26, r26
 4f2:	bb 1f       	adc	r27, r27
 4f4:	a6 17       	cp	r26, r22
 4f6:	b7 07       	cpc	r27, r23
 4f8:	10 f0       	brcs	.+4      	; 0x4fe <__udivmodhi4_ep>
 4fa:	a6 1b       	sub	r26, r22
 4fc:	b7 0b       	sbc	r27, r23

000004fe <__udivmodhi4_ep>:
 4fe:	88 1f       	adc	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	5a 95       	dec	r21
 504:	a9 f7       	brne	.-22     	; 0x4f0 <__udivmodhi4_loop>
 506:	80 95       	com	r24
 508:	90 95       	com	r25
 50a:	bc 01       	movw	r22, r24
 50c:	cd 01       	movw	r24, r26
 50e:	08 95       	ret

00000510 <_exit>:
 510:	f8 94       	cli

00000512 <__stop_program>:
 512:	ff cf       	rjmp	.-2      	; 0x512 <__stop_program>
